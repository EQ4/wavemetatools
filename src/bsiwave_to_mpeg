#!/usr/bin/perl
#
#    bsiwave_to_mpeg
#    
#    Copyright (C) 2005  Nicholas J. Humfrey
#    
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#    
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

use MP3::Tag;
use IO::Pipe;
use strict;
use warnings;

## Globals / Settings
my $WAVEUNWRAP = 'waveunwrap';
my $WAVEMETAINFO = 'wavemetainfo';

my $BSI_TAGMAP = {
	'disp-title' => 'TIT2',
	'info-iart' => 'TPE1',
	'info-ialb' => 'TALB',
	'info-iyer' => 'TYER',
	'info-itrk' => 'TRCK',
	'info-icmt' => 'COMM,eng,',
	'info-isrf' => 'TXXX,Intro',
	'info-imed' => 'TXXX,Sec Tone',
	'info-isrc' => 'TXXX,Category',
	'info-bfad' => 'TXXX,No fade',
	'info-igre' => 'TCON',
	'info-ieng' => 'TXXX,Producer',
	'info-itch' => 'TXXX,Talent',
	'info-icom' => 'TCOM',
	'info-ipub' => 'TPUB',
	'info-bcpr' => 'TCOP',
	'info-inam' => 'TXXX,OutCue',
	'info-icop' => 'TXXX,Agency',
	'info-isft' => 'TXXX,Account Exec',
	'info-isbj' => 'TXXX,Copy',
	'info-iurl' => 'TXXX,URL',
	'info-ibpm' => 'TXXX,BPM',
	'info-bkey' => 'TXXX,Key',
	'info-bend' => 'TXXX,End',
	'info-berg' => 'TXXX,Energy',
	'info-btxr' => 'TXXX,Texture',
	'info-btpo' => 'TXXX,Tempo',
	'info-hkst' => 'TXXX,Hook Start',
	'info-hkst' => 'TXXX,Hook End',
	'info-ignr' => 'TXXX,Start Date',
	'info-ikey' => 'TXXX,End Date',
	'info-bstm' => 'TXXX,Start Time',
	'info-betm' => 'TXXX,End Time',
	'info-bstw' => 'TXXX,Start Window',
	'info-betw' => 'TXXX,End Window',
};



## Get Parameters
my $input = shift( @ARGV )  || usage("Missing input file");
my $output = shift( @ARGV ) || usage("Missing output file");


## Is the input a directory or a file ?
if (-d $input ) {

	if (!-d $output) {
		die "Output must be a directory, if input is a directory.\n";
	}
	
	opendir( INPUT, $input) or die "Failed to open input directory: $!";
	
	while( my $file = readdir( INPUT ) ) {
		my $inputpath = $input.'/'.$file;
		my $outputpath = $output.'/'.change_suffix($file);
		
		next if ($file =~ /^\./);
		next if (!-f $inputpath);
		
		print "$inputpath -> $outputpath\n";
		convert_file( $inputpath, $outputpath );
	}
	closedir( INPUT );
	

} else {

	convert_file( $input, $output );

}

exit;




sub change_suffix {
	my ($suffix) = @_;
	$suffix =~ s/(\.wav)$//i;
	$suffix .= '.mp3';
	return $suffix;
}


sub convert_file {
	my ($input_file, $output_file) = @_;
	
	## Get information about input file
	my $info = get_meta_info( $input_file );
	if ($info->{'fmt-audio-format'} !~ /MPEG/) {
		warn "Error: audio contained in WAVE file isn't MPEG Audio.\n";
		return;
	}
	
	## Unwrap the WAVE file
	system($WAVEUNWRAP, $input_file, $output_file) && 
	die "Failed to unwrap wave file: $!\n";
	
	## Apply ID3 tags
	apply_mp3_tags( $output_file, $info, $BSI_TAGMAP );

}


sub usage {
	my ($err) = @_;
	print "Error: $err\n" if ($err);
    print STDERR "Usage: $0 <filename.wav> <outputfile>\n\n";
    exit(-1);
}


sub get_meta_info {
	my ($file) = @_;
	my $info = {};
	
	my $pipe = new IO::Pipe;
	$pipe->reader( $WAVEMETAINFO, $file );

	# Put each of the info fields into a hash	
	while(my $line = <$pipe>) {
		my ($name, $value) = ($line =~ /^([-\w]+): (.*)$/);
		$info->{$name} = $value if ($name);
	}
	
	$pipe->close();
	
	return $info;
}


sub apply_mp3_tags {
	my ($filename, $info, $map) = @_;
	
	# Open the MP3 file and load existing tags	
	my $mp3 = MP3::Tag->new($filename);

	# Clean-up - remove old tags
	$mp3->get_tags();
	if (exists $mp3->{ID3v1}) {
		$mp3->{ID3v1}->remove_tag;
		$mp3->{ID3v1}->write_tag;
	}
	if (exists $mp3->{ID3v2}) {
		$mp3->{ID3v2}->remove_tag;
		$mp3->{ID3v2}->write_tag;
	}

	# Add new ID3v2 frames
	my $id3v2 = $mp3->new_tag("ID3v2");
	foreach( keys %$info ) {
		if (exists $map->{$_}) {
			my @frame = mysplit( $map->{$_} );
			my $value = $info->{$_};
			$id3v2->add_frame(@frame, $value) || warn "Failed to add frame for $_.";
		}
	}
	
	# Saves changes to disc and close file
	$id3v2->write_tag();
	$mp3->close();
}


sub mysplit
{
	my ($expr) = @_;
	my @parts = split(/,/, $expr);
	if ($expr =~ /,$/) {
		push(@parts, '');
	}
	return @parts;
}
