#!/usr/bin/perl
#
#    wavemeta_to_mpeg
#    
#    Copyright (C) 2005  Nicholas J. Humfrey
#    
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#    
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

use MP3::Tag;
use strict;
use warnings;

## Globals
my $WAVEUNWRAP = 'waveunwrap';
my $WAVEMETAINFO = 'wavemetainfo';
my $BSI_TAGMAP = {
	'disp-title' => 'TIT2',
	'info-iart' => 'TPE1',
	'info-ialb' => 'TALB',
	'info-iyer' => 'TYER',
};



## Get Parameters
my $input_file = shift( @ARGV )  || usage("Missing input file");
my $output_file = shift( @ARGV ) || usage("Missing output file");

## Get information about input file
my $info = get_meta_info( $input_file );

## Unwrap the WAVE file
my $res = system($WAVEUNWRAP, $input_file, $output_file);
die "Failed to unwrap wave file: $res\n" unless ($res==0);

## Apply ID3 tags
apply_mp3_tags( $output_file, $info, $BSI_TAGMAP );

exit;


sub usage {
	my ($err) = @_;
	print "Error: $err\n" if ($err);
    print STDERR "Usage: $0 <filename.wav> <outputfile>\n\n";
    exit(-1);
}

sub get_meta_info {
	my ($file) = @_;
	my $info = {};
	
	open(INFO, "$WAVEMETAINFO $file|") or
	die "Failed to run 'wavemetainfo' on input file: $!";
	
	while(my $line = <INFO>) {
		my ($name, $value) = ($line =~ /^([-\w]+): (.*)$/);
		$info->{$name} = $value if ($name);
	}
	
	close(INFO);
	
	return $info;
}

sub apply_mp3_tags {
	my ($filename, $info, $tagmap) = @_;
	
	# Open the MP3 file and load existing tags	
	my $mp3 = MP3::Tag->new($filename);
	$mp3->get_tags();

	# Remove any existing ID3v1
	$mp3->{ID3v1}->remove_tag() if (exists $mp3->{ID3v1});

	# Create ID3v2 tags if they don't already exist
	$mp3->new_tag("ID3v2") unless (exists $mp3->{ID3v2});
	
	## Add ID3v2 frames
	my $id3v2 = $mp3->{ID3v2};
	$id3v2->add_frame("TIT2", "Hello World !");
	foreach( keys %$info ) {
		print "$_ -> $info->{$_}\n";
	}
	
	
	# Saves changes to disc and close file
	$id3v2->write_tag();
	$mp3->close();
}




# Process an mp3 file
# sub processFile {
# 	my($fileName) = @_;
# 
# 	print "Processing file: $filename\n";
# 	print "Getting information about the WAVE file...";
# 	my $fullCmd = "$waveInfoCmd ".quotemeta($fileName);
# 	my @waveInfo = split(/\n/, `$fullCmd`);
# 	print "\n";
# 	
# 	# Make sure it is an MPEG file
# 	if (getField("AudioFormat", @waveInfo) ne "MPEG") {
# 		warn "WAV file is not encoded as MPEG.\n";
# 		return;
# 	}
# 	
# 	# Find the file offset and length
# 	my $fileOffset = getField("AudioDataSeek", @waveInfo);
# 	my $fileLength = getField("AudioDataSize", @waveInfo);
# 	if ($fileOffset eq "" || $fileLength eq "") {
# 		warn "Cannot find either audio data length or offset in WAVE file.\n";
# 		return;
# 	}
# 	
# 	# Get information about the track
# 	my $title = getField("Title", @waveInfo);
# 	my $artist = getField("Artist", @waveInfo);
# 	my $album = getField("Album", @waveInfo);
# 	my $year = getField("Year", @waveInfo);
# 	my $comment = getField("Comment", @waveInfo);
# 	my $genre = getField("Genre", @waveInfo);
# 	my $publisher = getField("Publisher", @waveInfo);
# 	my $bpm = getField("BPM", @waveInfo);
# 	my $copyright = getField("Copyright", @waveInfo);
# 	
# 	# Work out the name of the new file
# 	$fileName =~ /^(.*)\/([^\/]*)$/;
# 	my $path = $1;
# 	$path .= "/" if ($path ne "");
# 	#print "Path is: $path\n";
# 	my $artistSpare = 12-length($artist); $artistSpare = 0 if ($artistSpare < 0);
# 	my $titleSpare = 12-length($title); $titleSpare = 0 if ($titleSpare < 0);
# 	my $newFilename = $path.substr($artist, 0, 12+$titleSpare)." - ".
# 				  substr($title, 0, 12+$artistSpare).".mp3";
# 	print "Filename: $newFilename\n";
# 	
# 	# Copy the audio data out of the WAV and into the MP3
# 	print "Copying audio data...";
# 	if (open(READ, "<$fileName")) {
# 		seek(READ, $fileOffset, 0) || warn "Failed to seek to start of audio data: $!\n";
# 		if (open(WRITE, ">$newFilename")) {
# 			while($fileLength) {
# 				if ($fileLength < $ReadBufferSize) { $readLen = $fileLength; }
# 				else { $readLen = $ReadBufferSize; }
# 				$fileLength -= read READ, $buf, $readLen;
# 				print WRITE $buf;
# 			}
# 			close(WRITE);
# 		} else { warn "Failed to open output file: $!"; }
# 	} else { warn "Failed to open input file: $!"; }
# 	close(READ);
# 	print "\n";
# 	
# 	# Now set the ID3 tags on the new file
# 	print "Setting ID3 tags...";	
# 	$mp3 = MP3::Tag->new($newFilename);
# 	$id3v2 = $mp3->newTag("ID3v2");
# 	$id3v2->add_frame("TIT2", $title) if (defined $title);
# 	$id3v2->add_frame("TPE1", $artist) if (defined $artist);
# 	$id3v2->add_frame("TALB", $album) if (defined $album);
# 	$id3v2->add_frame("TYER", $year) if (defined $year);
# 	$id3v2->add_frame("COMM", "ENG", "$PROGRAM_NAME", $comment) if (defined $comment);
# 	$id3v2->add_frame("TCON", $genre) if (defined $genre);
# 	$id3v2->add_frame("TPUB", $publisher) if (defined $publisher);
# 	$id3v2->add_frame("TBPM", $bpm) if (defined $bpm);
# 	$id3v2->add_frame("TCOP", $copyright) if (defined $copyright);
# 	$id3v2->write_tag();
# 	$mp3->close();
# 	print "\n";
# }


